%!PS

/mm { 72 25.4 div mul } bind def
/inch { 72 mul } bind def

/imperial-print-with-fraction true def  % print 0.5 fractions as 1/2 in imperial
/spherometer-radius 50 mm def     % Radius of circle circumscribing the legs
/pitch 0.5 mm def                 % Pitch of our measure screw (M3)

/inner-radius 20 mm 2 div def     % 15 mm plus some airbubble margin.
/outer-radius spherometer-radius 5 mm add def
/center-hole-radius 0.2 mm def

/font-size 11 def                 % As large as possible for maximum readability
/text-line-clearance 0.3 mm def   % Text above measure tick-line
/text-spacing 0.75 mm def         % Leave at least this amount to next tick

/turns 2.1 mm pitch div 1 add def % Turns: depends on maximum measure distance

/strip-fill-fraction 0.80 def  % What width of the spiral text strip is used.

/strip-width outer-radius inner-radius sub turns div def
/PI 3.1415926 def

% Use Latin1 encoding, because it has a 1/2 character
/Helvetica findfont
dup length dict begin
{1 index /FID ne {def}{pop pop} ifelse} forall
/Encoding ISOLatin1Encoding def
currentdict
end
/Helvetica-latin1 exch definefont pop

0 setlinewidth

% Input: radius, output: sag
/radius-to-sag {
    dup
    dup mul
    spherometer-radius dup mul
    sub
    sqrt
    sub
} def

% rotate-pos-in-mm (text) -> difference
/write-at {
    1 dict begin
    /txt exch def
    /rotate-pos exch def
    /radius outer-radius rotate-pos pitch div strip-width mul sub def
    % Only draw if we comfortably with within the constraint
    radius strip-width sub inner-radius ge {
	gsave
	rotate-pos pitch div 360 mul rotate
	% tick mark:
	radius neg 0 moveto strip-width strip-fill-fraction mul 0 rlineto stroke

	radius neg
	strip-width strip-fill-fraction mul add
	txt stringwidth pop sub
	text-line-clearance moveto txt show
	grestore
    } if
    font-size text-line-clearance text-spacing add add   % Amount we want to clear
    radius PI mul 2 mul  % Full diameter at current pos
    div                  % Fraction of a turn until we're clear
    pitch mul
    end
} def

% r start-angle bool_is_left (txt) ->
/radius-print {
    1 dict begin
    /txt exch def
    /is-left exch def
    /start-angle exch def
    is-left { neg } if
    /r exch def
    gsave
    start-angle rotate
    0 r moveto

    /onechar ( ) def
    txt {
	onechar 0 3 -1 roll put
	onechar show
	onechar stringwidth pop r abs atan
        is-left not { neg } if rotate
	0 r moveto
    } forall
    %txt show
    grestore
    end
} def

% (a) (b) -> (ab)
/strcat {
    exch dup length
    2 index length add string
    dup dup 4 2 roll copy length
    4 -1 roll putinterval
} def

% Print a number with fraction. Typically used for inch values
/cvs-with-fraction {
    imperial-print-with-fraction {
	100 mul cvi
	dup 100 mod 0 eq {
	    100 div cvi (       ) cvs (   ) strcat
	} {
	    dup 100 mod 25 eq {
		100 div cvi (       ) cvs (\274) strcat
	    } {
		dup 100 mod 50 eq {
		    100 div cvi (       ) cvs (\275) strcat
		} {
		    100 div cvi (       ) cvs (\276) strcat
		} ifelse
	    } ifelse
	} ifelse
    } {
	cvr (        ) cvs
    } ifelse
} def

% start step end {conversion} {print} sag-print-loop
/sag-print-loop {
    1 dict begin
    /print-fun exch def
    /conversion-fun exch def
    {
	/unit-radius exch def
	/sag unit-radius conversion-fun radius-to-sag def
	sag next lt {
	    /next sag
	    sag unit-radius print-fun write-at
	    sub def
	    /numbers-written numbers-written 1 add def
	} if
    } for
} def

/disk-boilerplate {
    center-hole-radius 0 moveto 0 0 center-hole-radius 0 360 arc stroke
    outer-radius 0 moveto 0 0 outer-radius 0 360 arc stroke
    inner-radius 0 moveto 0 0 inner-radius 0 360 arc stroke

    % Don't put a label on zero. _Maybe_ infinite symbol might make sense
    /Helvetica-Bold findfont font-size 1.1 mul scalefont setfont
    0 0 1 setrgbcolor
    0 (flat) write-at
    pop

    /Helvetica findfont font-size scalefont setfont
    0 0 0 setrgbcolor

    /Helvetica findfont 7 scalefont setfont
    outer-radius 3 mm sub -60 false (github.com/hzeller/simple-spherometer) radius-print
    /Helvetica findfont font-size scalefont setfont
} def

% TODO: right now, we manually choose ranges. This should be somewhat automatic
% finding 'good looking' steps, e.g. in 1, 2, 5 (10, 20...) with potential
% tick-marks at 0.5, 1 if two consecutive numbers can't be printed.
% OTHO, maybe hand-optimizing for a particular size disk is sufficient.


% Essentially, we're going through 'round' values of mm or inches and see
% if we can print them non-interferingly with previous numbers (stored in
% the 'next' variable.
% We have various loops that use different increments, e.g. in lower areas
% we'd like to have 1cm increments, while in higher 5cm or 10cm is more
% useful.
/metric-disk {
    disk-boilerplate
    /numbers-written 0 def
    /next 100000 def
    % 1 cm steps, until things get too tight, then increasingly larger
    % 'pleasing' round units.
    600 10 2700    {mm} {10 div cvi (     ) cvs} sag-print-loop
    2750 50 5000   {mm} {10 div cvi (     ) cvs} sag-print-loop

    /Helvetica findfont font-size 0.9 mul scalefont setfont
    % Switch to meter and show every 10cm.
    5000  100  8999  {mm} {1000 div cvr (      ) cvs (m) strcat} sag-print-loop
    9000  1000 13000 {mm} {1000 div cvi (      ) cvs (m) strcat} sag-print-loop
    15000 5000 25000 {mm} {1000 div cvi (      ) cvs (m) strcat} sag-print-loop

    /Helvetica-Bold findfont 12 scalefont setfont
    (cm) stringwidth pop 2 div neg -14 mm moveto (cm) show
    outer-radius 5 mm sub 80 false (metric) radius-print
    /Helvetica findfont 7 scalefont setfont
    14 mm 24 true (\(sphere radius\)) radius-print

    % Info scale density
    outer-radius 10 mm add 0 moveto numbers-written (       ) cvs show
    ( scale numbers) show
} def

/imperial-disk {
    disk-boilerplate
    /numbers-written 0 def
    /next 100000 def

    % If we write fractions, we can write quarters because they are more
    % compact than xx.25. So here we choose the quantization accordingly
    /Helvetica-latin1 findfont font-size 0.9 mul scalefont setfont
    20 imperial-print-with-fraction {0.25}{0.5} ifelse 27 {inch} {cvs-with-fraction} sag-print-loop

    27.5 0.5 46.5 {inch} {cvs-with-fraction} sag-print-loop

    /Helvetica-latin1 findfont font-size scalefont setfont
    47 1 74     {inch} {cvi (        ) cvs} sag-print-loop
    76 2 120    {inch} {cvi (        ) cvs} sag-print-loop
    125 5 275   {inch} {cvi (        ) cvs} sag-print-loop
    276 12 1000 {inch} {12 div cvi (     ) cvs (') strcat} sag-print-loop

    /Helvetica-Bold findfont 12 scalefont setfont
    outer-radius 5 mm sub 80 false (imperial) radius-print
    16 mm -10 true (inch) radius-print
    /Helvetica findfont 7 scalefont setfont
    15 mm 24 true (\(sphere radius\)) radius-print

    % Info scale density
    outer-radius 10 mm add 0 moveto numbers-written (       ) cvs show
    ( scale numbers) show
} def

% Some instructions, because it is easy to forget to cut out before laminating.
/Helvetica findfont 12 scalefont setfont
30 mm 260 mm moveto
(\(1\) Cut outside and inside circle. \(2\) laminate disk.) show
30 mm 255 mm moveto
(\(3\) Finally, cut out out from laminate, outside the 'airbubble' margin.) show
outer-radius 15 mm add outer-radius 15 mm add translate metric-disk
0 outer-radius 2.2 mul translate imperial-disk

showpage
