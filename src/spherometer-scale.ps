%!PS

/mm { 72 25.4 div mul } bind def
/cm { 72 2.54 div mul } bind def
/inch { 72 mul } bind def

/print-with-fraction true def  % print 0.5 fractions as 1/2 in imperial
/spherometer-radius 50 mm def     % Radius of circle circumscribing the legs
/pitch 0.5 mm def                 % Pitch of our measure screw (M3)

/inner-radius 20 mm 2 div def     % 15 mm plus some airbubble margin.
/outer-radius spherometer-radius 5 mm add def
/center-hole-radius 0.2 mm def

/font-size 11 def                 % As large as possible for maximum readability
/text-line-clearance 0.3 mm def   % Text above measure tick-line
/text-spacing 0.7 mm def         % Leave at least this amount to next tick

% Turns: depends on maximum useful measurement range within the acrylic
% sandwich; typically the spacers would be made out of 3mm acrylic for instance.
% And also depending on the lowest end of relevant measurement range: a
% small mirror with, say f2, will have a limited sag.
/turns 1.6 mm pitch div 1 add def

/strip-fill-fraction 0.80 def  % What width of the spiral text strip is used.

/strip-width outer-radius inner-radius sub turns div def
/PI 3.1415926 def

% Use Latin1 encoding, because it has a 1/2 character we need for fraction-print
/Helvetica findfont
dup length dict begin
{1 index /FID ne {def}{pop pop} ifelse} forall
/Encoding ISOLatin1Encoding def
currentdict
end
/Helvetica-latin1 exch definefont pop

0 setlinewidth

% Input: radius, output: sag
/radius-to-sag {
    dup
    dup mul
    spherometer-radius dup mul
    sub
    sqrt
    sub
} def

% Given a rotational position, write the mark and number on that particular
% angle and spiral-distance on the disk.
% Return on stack what the least next rotational position is we can write
% a mark without interfering with the current written number
% rotate-pos-in-mm (text) -> difference
/write-at {
    1 dict begin
    /txt exch def
    /rotate-pos exch def
    /radius outer-radius rotate-pos pitch div strip-width mul sub def
    % Only draw if we comfortably with within the constraint
    radius strip-width sub inner-radius ge {
	gsave
	rotate-pos pitch div 360 mul rotate
	% tick mark:
	radius neg 0 moveto strip-width strip-fill-fraction mul 0 rlineto stroke

	radius neg
	strip-width strip-fill-fraction mul add
	txt stringwidth pop sub
	text-line-clearance moveto txt show
	grestore
    } if
    font-size text-line-clearance text-spacing add add   % Amount we want to clear
    radius PI mul 2 mul  % Full diameter at current pos
    div                  % Fraction of a turn until we're clear
    pitch mul
    end
} def

% r start-angle bool_is_left (txt) ->
/radius-print {
    1 dict begin
    /txt exch def
    /is-left exch def
    /start-angle exch def
    is-left { neg } if
    /r exch def
    gsave
    start-angle rotate
    0 r moveto

    /onechar ( ) def
    txt {
	onechar 0 3 -1 roll put
	onechar show
	onechar stringwidth pop r abs atan
        is-left not { neg } if rotate
	0 r moveto
    } forall
    %txt show
    grestore
    end
} def

% (a) (b) -> (ab)
/strcat {
    exch dup length
    2 index length add string
    dup dup 4 2 roll copy length
    4 -1 roll putinterval
} def

% print number, but remove all-zero decimal fraction.
/cvs-no-trailing-zero {
    dup
    10 mul cvi 10 mod 0 eq {
	cvi (      ) cvs (   ) strcat
    } {
	(      ) cvs
    } ifelse
} def

% Print a number with fraction. Typically used for inch values
/cvs-with-fraction {
    print-with-fraction {
	100 mul cvi
	dup 100 mod 0 eq {
	    100 div cvi (       ) cvs (   ) strcat
	} {
	    dup 100 mod 25 eq {
		100 div cvi (       ) cvs (\274) strcat
	    } {
		dup 100 mod 50 eq {
		    100 div cvi (       ) cvs (\275) strcat
		} {
		    100 div cvi (       ) cvs (\276) strcat
		} ifelse
	    } ifelse
	} ifelse
    } {
	cvr (        ) cvs
    } ifelse
} def

% sag-print-loop modifies two global variables
/sag-print-loop-init {
    /numbers-written 0 def
    /next 100000 def
} def

% start step end {conversion} {print} sag-print-loop
/sag-print-loop {
    1 dict begin
    /print-fun exch def
    /conversion-fun exch def
    {
	/unit-radius exch def
	/sag unit-radius conversion-fun radius-to-sag def
	sag next lt {
	    /txt unit-radius print-fun def   % The text we write
	    /diff sag txt write-at def       % write it at pos sag
	    % Remember in /next when the next useful numbe is we can write
	    /next sag diff sub def
	    /numbers-written numbers-written 1 add def
	} if
    } for
} def

/disk-boilerplate {
    center-hole-radius 0 moveto 0 0 center-hole-radius 0 360 arc stroke
    outer-radius 0 moveto 0 0 outer-radius 0 360 arc stroke
    inner-radius 0 moveto 0 0 inner-radius 0 360 arc stroke

    % Don't put a label on zero. _Maybe_ infinite symbol might make sense
    /Helvetica-Bold findfont font-size 1.1 mul scalefont setfont
    0 0 1 setrgbcolor
    0 (flat) write-at
    pop

    /Helvetica findfont font-size scalefont setfont
    0 0 0 setrgbcolor

    /Helvetica findfont 7 scalefont setfont
    outer-radius 3 mm sub -60 false (github.com/hzeller/simple-spherometer) radius-print
    /Helvetica findfont font-size scalefont setfont
} def

% TODO: right now, we manually choose ranges. This should be somewhat automatic
% finding 'good looking' steps, e.g. in 1, 2, 5 (10, 20...) with potential
% tick-marks at 0.5, 1 if two consecutive numbers can't be printed.
% OTHO, maybe hand-optimizing for a particular size disk is sufficient.


% Essentially, we're going through 'round' values of mm or inches and see
% if we can print them non-interferingly with previous numbers (stored in
% the 'next' variable.
% We have various loops that use different increments, e.g. in lower areas
% we'd like to have 1cm increments, while in higher 5cm or 10cm is more
% useful.
/metric-disk {
    disk-boilerplate
    sag-print-loop-init
    % 1 cm steps, until things get too tight, then increasingly larger
    % 'pleasing' round intervals
    /Helvetica-latin1 findfont font-size scalefont setfont
    80 1 99   {cm} {(     ) cvs} sag-print-loop
    100 2 500 {cm} {(     ) cvs} sag-print-loop

    /Helvetica findfont font-size 0.9 mul scalefont setfont
    % Switch to meter and show every 10cm.
    500  10  850  {cm} {100 div cvr (      ) cvs (m) strcat} sag-print-loop
    900  100 1300 {cm} {100 div cvi (      ) cvs (m) strcat} sag-print-loop
    1500 500 2500 {cm} {100 div cvi (      ) cvs (m) strcat} sag-print-loop

    /Helvetica-Bold findfont 12 scalefont setfont
    (cm) stringwidth pop 2 div neg -18 mm moveto (cm) show
    outer-radius 5 mm sub 80 false (metric) radius-print
    /Helvetica findfont 7 scalefont setfont
    18 mm 24 true (\(sphere radius\)) radius-print

    % Info scale density
    outer-radius 10 mm add 0 moveto numbers-written (       ) cvs show
    ( scale numbers) show
} def

/imperial-disk {
    disk-boilerplate
    sag-print-loop-init

    /Helvetica-latin1 findfont font-size scalefont setfont
    31 0.5 43.5 {inch} {cvs-with-fraction} sag-print-loop
    44 1 70     {inch} {cvi (        ) cvs} sag-print-loop
    72 2 106    {inch} {cvi (        ) cvs} sag-print-loop
    107 1 119   {inch} {cvi (        ) cvs} sag-print-loop
    120 2 275   {inch} {cvi (        ) cvs} sag-print-loop
    276 12 76 12 mul {inch} {12 div cvi (     ) cvs (') strcat} sag-print-loop

    /Helvetica-Bold findfont 12 scalefont setfont
    outer-radius 5 mm sub 80 false (imperial) radius-print
    18 mm -10 true (inch) radius-print
    /Helvetica findfont 7 scalefont setfont
    18 mm 24 true (\(sphere radius\)) radius-print

    % Info scale density
    outer-radius 10 mm add 0 moveto numbers-written (       ) cvs show
    ( scale numbers) show
} def

% Some instructions, because it is easy to forget to cut out before laminating.
/Helvetica findfont 12 scalefont setfont
30 mm 260 mm moveto
(\(1\) Cut outside and inside circle. \(2\) laminate disk.) show
30 mm 255 mm moveto
(\(3\) Finally, cut out out from laminate, outside the 'airbubble' margin.) show

outer-radius 15 mm add outer-radius 15 mm add translate metric-disk
0 outer-radius 2.2 mul translate imperial-disk

showpage
